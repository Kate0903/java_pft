Index: ../mantis-tests/src/test/java/ru/stqa/pft/mantis/appmanager/JamesHelper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../mantis-tests/src/test/java/ru/stqa/pft/mantis/appmanager/JamesHelper.java b/../mantis-tests/src/test/java/ru/stqa/pft/mantis/appmanager/JamesHelper.java
new file mode 100644
--- /dev/null	(date 1680539384212)
+++ b/../mantis-tests/src/test/java/ru/stqa/pft/mantis/appmanager/JamesHelper.java	(date 1680539384212)
@@ -0,0 +1,119 @@
+package ru.stqa.pft.mantis.appmanager;
+
+import org.apache.commons.net.telnet.TelnetClient;
+
+import javax.mail.*;
+import java.io.InputStream;
+import java.io.PrintStream;
+
+import static com.sun.deploy.perf.DeployPerfUtil.write;
+
+public class JamesHelper {
+  private ApplicationManager app;
+  private TelnetClient telnet;
+  private Store store;
+  private InputStream in;
+  private PrintStream out;
+  private Session mailSession;
+  private String mailserver;
+
+  public JamesHelper (ApplicationManager app){
+    this.app = app;
+    telnet = new TelnetClient();
+    mailSession = Session.getDefaultInstance(System.getProperties());
+  }
+  public boolean doesUserExist(String name){
+    initTelnetSession();
+    write("verify" + name);
+    String result = readUntil("exist");
+    closeTelnetSession();
+    return result.trim().equals("User" + name + "exist");
+  }
+  public void createUser(String name, String password){
+  initTelnetSession();
+  write("adduser" + name + " " + " added");
+  closeTelnetSession();
+
+  }
+  public void deleteUser (String name){
+    initTelnetSession();
+    write("deluser" + name);
+    String result readUntil("User " + name + " deleted");
+    closeTelnetSession();
+      }
+      private void initTelnetSession(){
+    mailserver = app.getProperty("mailserver.host");
+    int port = Integer.parseInt(app.getProperty("mailserver.post"));
+    String login = app.getProperty("mailserver.adminlogin");
+    String password = app.getProperty("mailserver.adminpassword");
+try {
+  telnet.connect(mailserver, port);
+  in = telnet.getInputStream();
+  out = new PrintStream(telnet.getOutputStream());
+} catch (Exception e){
+  //TADO Auto-generated catch block
+  e.printStackTrace();
+}
+ readUntil("Login id:");
+write("");
+ readUntil("Password");
+ write("");
+
+readUntil("Login id:");
+write(login);
+readUntil("Password");
+write(password);
+
+readUntil("Welcome " +login+". HELP for a list of commands");
+      }
+      private String readUntil(String pattern){
+    try{
+      char lastChar = pattern.charAt(pattern.length() - 1);
+      StringBuffer sb = new StringBuffer();
+      char ch = (char) in.read();
+      while (true){
+        System.out.print(ch);
+        sb.append(ch);
+        if (ch == lastChar){
+          if (sb.toString().endsWith(pattern)){
+            return sb.toString();
+          }
+        }
+        ch = (char) in.read();
+      }
+    } catch (Exception e) {
+      e.printStackTrace();
+    }
+    return null;
+      }
+      private void write (String value){
+    try {
+      out.println(value);
+      out.flush();
+      System.out.println(value);
+    } catch (Exception e){
+      e.printStackTrace();
+    }
+  }
+  private void closeTelnetSession(){
+    write ("quit");
+      }
+      public void drainEmail(String username, String password) throws MessagingException{
+    Folder inbox = openInbox(username, password);
+    for (Message message : inbox.getMessage()) {
+      message.setFlag(Flags.Flag.DELETED, true);
+    }
+    closeFolder(inbox);
+      }
+      private void closeFolder(Folder folder) throws MessagingException{
+    folder.close(true);
+    store.close();
+      }
+      private Folder openInbox (String username, String password) throws MessagingException{
+    store = mailSession.getStore("pop3");
+    store.connect(mailserver, username, password);
+    Folder folder = store.getDefaultFolder().getFolder("INBOX");
+    folder.open(Folder.READ_WRITE);
+
+      }
+}
